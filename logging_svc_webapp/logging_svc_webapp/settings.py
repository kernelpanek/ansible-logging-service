"""
Django settings for logging_svc_webapp project.

Generated by "django-admin startproject" using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import ldap
from django_auth_ldap.config import LDAPSearch, LDAPSearchUnion
from django_auth_ldap.config import NestedGroupOfNamesType


def env_var(key, default=None):
    """Retrieves env vars with boolean replacements"""
    val = os.environ.get(key, default)
    if val is not None and val.lower() == "true":
        val = True
    elif val is not None and val.lower() == "false":
        val = False
    return val


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = env_var("SECRET_KEY")

DEBUG = env_var("DEBUG")

ALLOWED_HOSTS = [host.strip() for host in env_var("ALLOWED_HOSTS").split(",") if len(host) > 0]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "logging_svc.apps.LoggingSvcConfig",
    "dashboard.apps.DashboardConfig",
    "rest_framework",
    "django_filters",
    "crispy_forms",
    "rest_framework.authtoken",
    "rest_framework_swagger",
    "django_auth_ldap",
    "storages",
    "dashing",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated"
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "PAGE_SIZE": 25
}

CRISPY_TEMPLATE_PACK = "bootstrap4"
ROOT_URLCONF = "logging_svc_webapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "logging_svc_webapp.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": env_var("DATABASE_ENGINE"),
        "NAME": env_var("DATABASE_NAME"),
        "USER": env_var("DATABASE_USER"),
        "PASSWORD": env_var("DATABASE_PASSWORD"),
        "HOST": env_var("DATABASE_HOST"),
        "PORT": env_var("DATABASE_PORT"),
    }
}

AUTHENTICATION_BACKENDS = set([be.strip() for be in env_var("AUTHENTICATION_BACKENDS").split(",") if len(be) > 0])

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = env_var("LANGUAGE_CODE", "en-us")
TIME_ZONE = env_var("TIME_ZONE", "UTC")
USE_I18N = env_var("USE_I18N", True)
USE_L10N = env_var("USE_L10N", True)
USE_TZ = env_var("USE_TZ", True)
APPEND_SLASH = env_var("APPEND_SLASH", False)
STATIC_URL = env_var("STATIC_URL", "/static/")

###############################################################################
# S3 STORAGE SETTINGS
###############################################################################

DEFAULT_FILE_STORAGE = env_var("DEFAULT_FILE_STORAGE", "storages.backends.s3boto3.S3Boto3Storage")
AWS_ACCESS_KEY_ID = env_var("AWS_ACCESS_KEY_ID", None)
AWS_SECRET_ACCESS_KEY = env_var("AWS_SECRET_ACCESS_KEY", None)
AWS_AUTO_CREATE_BUCKET = env_var("AWS_AUTO_CREATE_BUCKET", False)
AWS_STORAGE_BUCKET_NAME = env_var("AWS_STORAGE_BUCKET_NAME", None)
AWS_LOCATION = env_var("AWS_LOCATION", None)
AWS_DEFAULT_ACL = env_var("AWS_DEFAULT_ACL", "private")
AWS_S3_REGION_NAME = env_var("AWS_S3_REGION_NAME", "us-east-1")
AWS_S3_FILE_OVERWRITE = env_var("AWS_S3_FILE_OVERWRITE", False)
AWS_S3_ENCRYPTION = env_var("AWS_S3_ENCRYPTION", True)
